#!/bin/bash
#
# DESCRIPTION:
#   Script for running sentiment analysis.
#
# USAGE:
#   ./RUN_ANALYSIS p        runs the preprocessing.
#   ./RUN_ANALYSIS a        runs the analysis.
#   ./RUN_ANALYSIS display  runs the display, see display/README.md
#   ./RUN_ANALYSIS clean    removes all files generated by this script.
#
# REQUIREMENTS:
#   positive.txt            file containing positive tweets.
#   negative.txt            file containing negative tweets.
#   tweets/files            files containing tweets to be analysed.
#   The preprocessing must be run before the analysis.
#
set -x

if [ $1 -a $1 = "p" ]
then
  python preprocess.py -p positive.txt
  python preprocess.py -n negative.txt
  LINES=`wc -l < positive_preprocessed.txt`
  POS_LINES=$((LINES-2000))
  split -l $POS_LINES positive_preprocessed.txt
  mv xaa positive_temp.txt
  mv xab positive_test.txt
  LINES=`wc -l < negative_preprocessed.txt`
  NEG_LINES=$((LINES-2000))
  split -l $NEG_LINES negative_preprocessed.txt
  mv xaa negative_temp.txt
  mv xab negative_test.txt
  COUNT=$((POS_LINES<NEG_LINES?POS_LINES:NEG_LINES))
  grep -m $COUNT -e '^' positive_temp.txt > positive_training.txt
  grep -m $COUNT -e '^' negative_temp.txt > negative_training.txt
  rm positive_temp.txt
  rm negative_temp.txt
set +x
  files=`ls tweets/`
set -x
  for f in $files;
  do
    python preprocess.py -d tweets/$f
  done
  python run_sa.py -t
fi

if [ $1 -a $1 = "a" ]
then
  python run_sa.py -a --evalfiles tweets/*_preprocessed.txt
  python aggregate.py -d tweets/*_result.txt
  now=`date +"%Y-%m-%d"`
  mv aggregated_results.csv display/data/data_$now.csv
fi

if [ $1 -a $1 = "display" ]
then
  cd display
  ./db/setup_database.sh
  python display.py
  cd ..
fi

if [ $1 -a $1 = "clean" ]
then
  rm positive_*
  rm negative_*
  rm tweets/*_preprocessed*
fi
